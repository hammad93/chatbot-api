{"changed":true,"filter":false,"title":"api.py","tooltip":"/api.py","value":"import json\nfrom flask import Flask, request\nfrom flask_restplus import Resource, Api, fields, reqparse\n#Default import from current directory\nimport relay\n\n#Import different classes\nimport sys\nsys.path.append('create-bot/')\nsys.path.append('mongodb/')\nsys.path.append('twitter-api/')\n\nimport create as birth\nimport get, put\n\n'''\nCHATBOT REST API\nHammad Usmani\nLast Updated: 5/16/17\n\nPURPOSE: To provide a REST API for create, read, update, delete, and list (CRUD) \noperations on the MongoDB .brain files\nMETHOD: Using flask as the server and OpenAPI for specifications, we can provide\na HTTP REST API to perform CRUD operations and chatting\n\nREFERENCES:\n- https://github.com/noirbizarre/flask-restplus\n- http://flask-restplus.readthedocs.io/en/stable/index.html\n- http://swagger.io/swagger-ui/\n- https://flask-restplus.readthedocs.io/en/stable/example.html\n\nNOTES:\n- Server automatically generates API documentation. To view the documentation, \nnavigate to the specified directory for specifications according to OpenAPI. By\ndefault this is the root director\n'''\napp = Flask(__name__)\napi = Api(app, version='1.0', title='Chatbot API', description='OpenAPI')\napp.config.SWAGGER_UI_DOC_EXPANSION = 'list'\napp.config.SWAGGER_UI_JSONEDITOR = True\n\n'''\n#CHAT RELAY\n\nPURPOSE: To provide a chat relay for the chatbots in the database\nMETHOD: Use a markov-chain chatbot to create artificial intelligence using the\nmethod created by Peter Teichmcd cache\n\n\nINPUT/OUTPUT: Based on the message relay some data, the output will be as follows -\nBoth input and output are in the same format. Timestamp is in ISO 8601 and time region is UTC\nmessage: application/json\n    {\n        'message': string    #Content of the message. Can have JSON strings\n        'uuid': UUID      #The index for the bot in a hex UUID formatted string\n    }\nNOTE: Output will be a string\n\nREFERENCES:\n- https://github.com/pteichman\n\ndata = json.loads(json.dumps(request.get_json(force=True)))\n'''\n@api.route('/chat')\n@api.doc(params={'uuid': 'The UUID associated with the chatbot', 'message': 'The message to relay to the chatbot'})\nclass chat(Resource):\n    def get(self):\n        #declare parser attributes\n        parser = reqparse.RequestParser()\n        parser.add_argument('uuid', action='append')\n        parser.add_argument('message', action='append')\n        \n        #Get data from request\n        response = parser.parse_args()\n        #Format the response data\n        data = {\n            'uuid' : response['uuid'][0],\n            'message' : response['message'][0]\n        }\n        \n        #return chat response\n        return relay.chat(data)\n'''\n## CREATE\n`PURPOSE:` To create a chatbot and store it into the MongoDB database\n\n`INPUT:` Request JSON requires these parameters:\n    - username          #Stored in the metadata for the .brain file\n    - twitter handle    #Stored in the metadata for the .brain file\n    \n`OUTPUT:` The UUID of the chatbot\n'''\n@api.route('/api/create')\n@api.doc(params={'username': 'An ID', 'handle': 'Twitter Handle'})\nclass create(Resource):\n    \n    def get(self):\n        #declare parser attributes\n        parser = reqparse.RequestParser()\n        parser.add_argument('username', action='append')\n        parser.add_argument('handle', action='append')\n        \n        #Get data from request\n        data = parser.parse_args()\n        \n        #Create chatbot based on parameters\n        return birth.twitter(data['handle'][0], data['username'][0], \"cache/\")\n'''\n## READ\n`PURPOSE:` To return a binary file containing the .brain of the chatbot\n\n`INPUT:` Request JSON requires these parameters:\n    - UUID\n    \n`OUTPUT:` .brain file\n'''\n@api.route('/api/read')\n@api.doc(params={'id': 'An ID'})    \nclass read(Resource):\n    def get(self, id):\n        return id\n\n'''\n## UPDATE\n`PURPOSE:` Update a chatbot\n\n`INPUT:` Request JSON with these parameters:\n    - Chatbot UUID\n    - .brain file\n    \n`OUTPUT:` UUID of the updated chatbot\n'''\n@api.route('/api/update')\n@api.doc(params={'id': 'An ID'})    \nclass update(Resource):\n    def get(self, id):\n        return id\n\n'''\n## DELETE\n`PURPOSE:` Delete a chatbot\n\n`INPUT:` Request JSON with these parameters:\n    - Chatbot UUID\n    \n`OUTPUT:` UUID of deleted chatbot\n'''\n@api.route('/api/delete')\n@api.doc(params={'id': 'An ID'})    \nclass delete(Resource):\n    def get(self, id):\n        return id\n\n'''\n## LIST\n`PURPOSE:` List the chatbots for a username\n\n`INPUT:` Request JSON with these parameters:\n    - username\n    \n`OUTPUT:` List of Chatbot UUID's\n'''\n@api.route('/api/list')\n@api.doc(params={'id': 'An ID'})    \nclass list(Resource):\n    def get(self, id):\n        return id\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=80)","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":166,"column":17},"end":{"row":167,"column":0},"action":"remove","lines":["",""],"id":5902}]]},"ace":{"folds":[],"scrolltop":1320,"scrollleft":0,"selection":{"start":{"row":94,"column":8},"end":{"row":94,"column":8},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":2,"state":"start","mode":"ace/mode/python"}},"timestamp":1495315411070}